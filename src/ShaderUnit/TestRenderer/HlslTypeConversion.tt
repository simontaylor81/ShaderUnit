<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;

namespace ShaderUnit.TestRenderer
{
	static class HlslTypeConversion
	{
		// Get the HLSL type that coresponds to a given CLR type.
		// Supports only certain known types.
		public static string ClrTypeToHlsl(Type type)
		{
			HlslTypeInfo typeInfo;
			if (_types.TryGetValue(type, out typeInfo))
			{
				return typeInfo.hlslType;
			}

			throw new ArgumentException($"Type cannot be converted to HLSL: {type.ToString()}", nameof(type));
		}

		// Get a HLSL type constructor literal for a given CLR object.
		// Supports only certain known types.
		public static string ClrValueToHlslLiteral(object value)
		{
			HlslTypeInfo typeInfo;
			if (_types.TryGetValue(value.GetType(), out typeInfo))
			{
				return typeInfo.makeLiteral(value);
			}

			throw new ArgumentException($"Value cannot be converted to HLSL: {value.ToString()}", nameof(value));
		}

		// Initialise type lookup table.
		static HlslTypeConversion()
		{
			// Scalars.
			AddTypeInfo(typeof(float), "float", value => value.ToString());
			AddTypeInfo(typeof(int), "int", value => value.ToString());
			AddTypeInfo(typeof(uint), "uint", value => value.ToString());

			// System.Numerics Vectors
<# foreach (var vectorType in NumericsVectorTypes())
{
#>
			AddTypeInfo(typeof(<#= vectorType.clrName #>), "<#= vectorType.HlslType #>", value =>
			{
				var vec = (<#= vectorType.clrName #>)value;
				return $"<#= vectorType.HlslType #>(<#= VectorAccess(vectorType.size, true) #>)";
			});
<#
}
#>

			// ShaderUnit.Maths Vec types
<# foreach (var vectorType in ShaderUnitVecTypes())
{
#>
			AddTypeInfo(typeof(<#= vectorType.clrName #>), "<#= vectorType.HlslType #>", value =>
			{
				var vec = (<#= vectorType.clrName #>)value;
				return $"<#= vectorType.HlslType#>(<#= VectorAccess(vectorType.size, false) #>)";
			});
<#
}
#>

			// System.Numerics.Matrix4x4
			// System.Numerics.Matrix4x4 is row-major in memory, so match that.
			AddTypeInfo(typeof(System.Numerics.Matrix4x4), "row_major float4x4", value =>
			{
				var m = (System.Numerics.Matrix4x4)value;
				return $"float4x4(<#= MatrixAccess(4, 4, true) #>)";
			});

			// ShaderUnit.Maths Matrix types.
			// ShaderUnit.Maths Matrix types are also row-major in memory, so match that here too.
<# foreach (var matrixType in ShaderUnitMatrixTypes())
{
#>
			AddTypeInfo(typeof(<#= matrixType.clrName #>), "row_major <#= matrixType.HlslType #>", value =>
			{
				var m = (<#= matrixType.clrName #>)value;
				return $"<#= matrixType.HlslType #>(<#= MatrixAccess(matrixType.sizeX, matrixType.sizeY, false) #>)";
			});
<#
}
#>
		}

		private static void AddTypeInfo(Type type, string hlslType, Func<object, string> makeLiteral)
		{
			_types.Add(type, new HlslTypeInfo { hlslType = hlslType, makeLiteral = makeLiteral });
		}

		private struct HlslTypeInfo
		{
			public string hlslType;
			public Func<object, string> makeLiteral;
		}

		private static Dictionary<Type, HlslTypeInfo> _types = new Dictionary<Type, HlslTypeInfo>();
	}
}

<#+

private struct VectorType
{
	public int size;
	public string clrName;
	public string hlslBaseType;

	public string HlslType { get { return string.Format("{0}{1}", hlslBaseType, size); } }
}

private struct MatrixType
{
	public int sizeX;
	public int sizeY;
	public string clrName;
	public string hlslBaseType;

	public string HlslType { get { return string.Format("{0}{1}x{2}", hlslBaseType, sizeX, sizeY); } }
}

private IEnumerable<VectorType> NumericsVectorTypes()
{
	return Enumerable.Range(2, 3).Select(i => new VectorType
	{
		size = i,
		clrName = "System.Numerics.Vector" + i.ToString(),
		hlslBaseType = "float",
	});
}

private IEnumerable<string> ShaderUnitMathsBaseTypes()
{
	// Handily these are all the same in C# and HLSL.
	return new[] { "float", "int", "uint" };
}

private IEnumerable<VectorType> ShaderUnitVecTypes()
{
	return 
		from baseType in ShaderUnitMathsBaseTypes()
		from i in Enumerable.Range(2, 3)
		select new VectorType
		{
			size = i,
			clrName = string.Format("ShaderUnit.Maths.Vec{0}<{1}>", i, baseType),
			hlslBaseType = baseType,
		};
}

private IEnumerable<MatrixType> ShaderUnitMatrixTypes()
{
	return
		from baseType in ShaderUnitMathsBaseTypes()
		from x in Enumerable.Range(1, 4)
		from y in Enumerable.Range(1, 4)
		select new MatrixType
		{
			sizeX = x,
			sizeY = y,
			clrName = string.Format("ShaderUnit.Maths.Matrix{0}x{1}<{2}>", x, y, baseType),
			hlslBaseType = baseType,
		};
}

private IEnumerable<string> VectorComponents(int size, bool uppercase)
{
	var result = (new[] { "x", "y", "z", "w" }).Take(size);
	if (uppercase)
	{
		result = result.Select(x => x.ToUpperInvariant());
	}
	return result;
}

private string VectorAccess(int size, bool uppercase)
{
	return string.Join(", ", VectorComponents(size, uppercase)
		.Select(component => "{vec." + component + "}"));
}

private IEnumerable<string> MatrixComponents(int sizeX, int sizeY, bool uppercase)
{
	var result = Enumerable.Range(1, sizeX).SelectMany(x => Enumerable.Range(1, sizeY), (x, y) => string.Format("m{0}{1}", x, y));
	if (uppercase)
	{
		result = result.Select(x => x.ToUpperInvariant());
	}
	return result;
}

private string MatrixAccess(int sizeX, int sizeY, bool uppercase)
{
	return string.Join(", ", MatrixComponents(sizeX, sizeY, uppercase)
		.Select(component => "{m." + component + "}"));
}

#>
